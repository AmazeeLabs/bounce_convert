<?php

/**
 * Implements hook_node_info()
 */
function bounce_convert_node_info() {
  return array(
    'bounce_convert' => array(
      'name' => t('Bounce Convert'),
      'base' => 'bounce_convert',
      'description' => t('Create a new campaign to detect and convert exiting web visitors into revenue.'),
      'has_title' => TRUE,
      'title_label' => t('Campaign title')
    )
  );
}

/**
 * Implement hook_form()
 */
function bounce_convert_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implement hook_form_alter()
 * To update form field values after CRUD operation on webforms and user roles
 */
function bounce_convert_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "bounce_convert_node_form") {
    $lang = $form['field_select_webform']['#language'];
    $form['field_select_webform'][$lang]['#options'] = bounce_convert_roles();
    $form['field_show_block_for_specific_ro'][$lang]['#options'] = user_roles($membersonly = FALSE);
  }
}

/**
 * @return array A list of published webforms
 */
function bounce_convert_roles() {
  $nodes = node_load_multiple(array(), array(
    'type' => 'webform',
    'status' => 1,
  ));
  $webforms = array();
  foreach ($nodes as $nid => $node) {
    $webforms[$nid] = check_plain($node->title);
  }
  return $webforms;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function bounce_convert_ctools_plugin_api($owner, $api) {
  if ($owner == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_field_group_info().
 */
function bounce_convert_field_group_info() {
  $export = array();

  $field_group = new stdClass();
  $field_group->disabled = FALSE; /* Edit this to true to make a default field_group disabled initially */
  $field_group->api_version = 1;
  $field_group->identifier = 'group_bounce_convert_modal|node|bounce_convert|form';
  $field_group->group_name = 'group_bounce_convert_modal';
  $field_group->entity_type = 'node';
  $field_group->bundle = 'bounce_convert';
  $field_group->mode = 'form';
  $field_group->parent_name = '';
  $field_group->data = array(
    'label' => 'Modal options',
    'weight' => '6',
    'children' => array(
      0 => 'field_background_color',
      1 => 'field_background_opacity',
      2 => 'field_modal_height',
      3 => 'field_modal_width',
    ),
    'format_type' => 'fieldset',
    'format_settings' => array(
      'formatter' => 'collapsible',
      'instance_settings' => array(
        'description' => '',
        'classes' => 'group-bounce-convert-modal field-group-fieldset',
        'required_fields' => 1,
      ),
    ),
  );
  $export['group_bounce_convert_modal|node|bounce_convert|form'] = $field_group;

  $field_group = new stdClass();
  $field_group->disabled = FALSE; /* Edit this to true to make a default field_group disabled initially */
  $field_group->api_version = 1;
  $field_group->identifier = 'group_bounce_convert_pages|node|bounce_convert|form';
  $field_group->group_name = 'group_bounce_convert_pages';
  $field_group->entity_type = 'node';
  $field_group->bundle = 'bounce_convert';
  $field_group->mode = 'form';
  $field_group->parent_name = 'group_bounce_convert';
  $field_group->data = array(
    'label' => 'Pages',
    'weight' => '8',
    'children' => array(
      0 => 'field_visibility_settings',
      1 => 'field_all_pages_except_those_lis',
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'label' => 'Pages',
      'instance_settings' => array(
        'required_fields' => 1,
        'classes' => 'group-bounce-convert-pages field-group-tab',
        'description' => '',
      ),
      'formatter' => 'closed',
    ),
  );
  $export['group_bounce_convert_pages|node|bounce_convert|form'] = $field_group;

  $field_group = new stdClass();
  $field_group->disabled = FALSE; /* Edit this to true to make a default field_group disabled initially */
  $field_group->api_version = 1;
  $field_group->identifier = 'group_bounce_convert_roles|node|bounce_convert|form';
  $field_group->group_name = 'group_bounce_convert_roles';
  $field_group->entity_type = 'node';
  $field_group->bundle = 'bounce_convert';
  $field_group->mode = 'form';
  $field_group->parent_name = 'group_bounce_convert';
  $field_group->data = array(
    'label' => 'Roles',
    'weight' => '9',
    'children' => array(
      0 => 'field_show_block_for_specific_ro',
    ),
    'format_type' => 'tab',
    'format_settings' => array(
      'formatter' => 'closed',
      'instance_settings' => array(
        'description' => '',
        'classes' => 'group-bounce-convert-roles field-group-tab',
        'required_fields' => 1,
      ),
    ),
  );
  $export['group_bounce_convert_roles|node|bounce_convert|form'] = $field_group;

  $field_group = new stdClass();
  $field_group->disabled = FALSE; /* Edit this to true to make a default field_group disabled initially */
  $field_group->api_version = 1;
  $field_group->identifier = 'group_bounce_convert|node|bounce_convert|form';
  $field_group->group_name = 'group_bounce_convert';
  $field_group->entity_type = 'node';
  $field_group->bundle = 'bounce_convert';
  $field_group->mode = 'form';
  $field_group->parent_name = '';
  $field_group->data = array(
    'label' => 'Visibility settings',
    'weight' => '11',
    'children' => array(
      0 => 'group_bounce_convert_pages',
      1 => 'group_bounce_convert_roles',
    ),
    'format_type' => 'tabs',
    'format_settings' => array(
      'label' => 'Visibility settings',
      'instance_settings' => array(
        'classes' => 'group-bounce-convert field-group-tabs',
      ),
    ),
  );
  $export['group_bounce_convert|node|bounce_convert|form'] = $field_group;

  return $export;
}
